package ejercicio1;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.*; //para la conexi√≥n
import java.io.*; //para input y output
import java.io.*; //para input y output
import javax.swing.JOptionPane;

public class Peer extends javax.swing.JFrame {
    
    private Servidor servidor;
    public static Cliente cliente;
    private String message = " ";
    public static int port_llamar = 0000; 
    public static String ip_llamar = "";
    private int port_server = 0000;
    private String iplocal = "127.0.0.1";
    public static Socket connection;
    private ServerSocket server;
    public static DataOutputStream output;
    public static DataInputStream input;
    public static boolean conected = false; 
    private String usuario = "";
    public static String IpCanalMulticast = "225.0.0.1";
    CanalNombres canal;
    public static boolean recibiContacto = false;

    public Peer() {
        initComponents();
        this.setTitle("Chattenger 3.0");
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        port_Server = new javax.swing.JTextField();
        Conectar = new javax.swing.JButton();
        Chatear = new javax.swing.JButton();
        nickname_client = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        mensaje = new javax.swing.JTextField();
        Enviar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        nickname_server = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Conectar");

        jLabel2.setText("Chatear");

        jLabel3.setText("Puerto:");

        Conectar.setText("Conectar");
        Conectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConectarActionPerformed(evt);
            }
        });

        Chatear.setText("Chatear");
        Chatear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChatearActionPerformed(evt);
            }
        });

        ipAsked.setText("Ip Adress:");

        portAsked.setText("Puerto:");

        chat.setColumns(20);
        chat.setRows(5);
        jScrollPane1.setViewportView(chat);

        Enviar.setText("Enviar");
        Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarActionPerformed(evt);
            }
        });

        jLabel6.setText("Nickname:");

        jLabel7.setText("Nickname:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(mensaje)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Enviar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel3))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(port_Server, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(nickname_server, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(Conectar)
                                .addGap(1, 1, 1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(ipAsked, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(portAsked, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(nickname_client, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Chatear))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jLabel2)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 10, Short.MAX_VALUE)
                    .addComponent(jSeparator2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Chatear)
                                .addComponent(nickname_client, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(port_Server, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(nickname_server, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ipAsked)
                                    .addComponent(portAsked, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(Conectar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Enviar)
                    .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Eventos
    private void ConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConectarActionPerformed
        this.port_server = Integer.parseInt(port_Server.getText());

        servidor = new Servidor(this.port_server, this.connection);
        servidor.start();

        usuario = nickname_server.getText();
        
        canal = new CanalNombres(usuario, port_server, iplocal);
        canal.start();
    }//GEN-LAST:event_ConectarActionPerformed

    
    private void ChatearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChatearActionPerformed
        
        if(this.conected == false) {

            canal.RequestContacto(nickname_client.getText());

        }

        if (this.conected == true) {
            chat.append("\n----------------------------------------\n"
                         + "  Conexion ya establecida.\n"
                         +"----------------------------------------\n");
        }
    }//GEN-LAST:event_ChatearActionPerformed

    
    private void EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarActionPerformed
        
        try{
            this.message = mensaje.getText();
            
            output.writeUTF(this.usuario +": " + this.message +"\n");
            output.flush();

            chat.append(this.usuario +": "+ this.message+"\n");
            
            mensaje.setText("");
            
        }catch(IOException e){
            chat.append("-------------------------------------------------"
                        + "\n !! No se pudo enviar el mensaje.\n"
                        + "-------------------------------------------------\n");
        }
    }//GEN-LAST:event_EnviarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Peer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Peer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Peer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Peer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Peer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Chatear;
    private javax.swing.JButton Conectar;
    private javax.swing.JButton Enviar;
    public static javax.swing.JTextArea chat;
    public static final javax.swing.JLabel ipAsked = new javax.swing.JLabel();
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    public static javax.swing.JTextField mensaje;
    private javax.swing.JTextField nickname_client;
    private javax.swing.JTextField nickname_server;
    public static final javax.swing.JLabel portAsked = new javax.swing.JLabel();
    private javax.swing.JTextField port_Server;
    // End of variables declaration//GEN-END:variables
}
//Clase Servidor
class Servidor extends Thread{

    private final int puerto;
    private Socket connection;
    
    Servidor(int puerto, Socket connection){
        this.puerto = puerto;
        this.connection = connection;
    }
    
    @Override
    public void run(){
        
        ServerSocket servidor;
        
        try {
            //creamos el socket del servidor
            servidor = new ServerSocket(this.puerto);
            System.out.println("Servidor iniciado");
            
            
            //Siempre esta escuchando peticiones
            while(true){
                
                if(Peer.conected==false){ 
                    
                    //Espera a que un cliente se conecte
                    connection = servidor.accept();
                    
                    int accept = JOptionPane.showConfirmDialog(null, "¬øAcepta solicitud?","Nuevo Chat", JOptionPane.YES_NO_OPTION);
                    
                    if (accept == 0) {
                    Peer.conected = true;

                    System.out.println("Cliente conectado");

                    Peer.output =  new DataOutputStream(connection .getOutputStream());
                    Peer.output.flush();
                    Peer.input = new DataInputStream(connection.getInputStream());
                    
                    Peer.output.writeUTF("\n-------------------------------------------------"
                                       + "\nConexi√≥n establecida exitosamente.\n"
                                       + "-------------------------------------------------\n");

                        Chatear chatting = new Chatear(Peer.input);
                        chatting.start();
                    } else {
                        connection = servidor.accept();

                        //Peer.chat.append("\n\nLa persona con la intenta comunicarse no se encuentra disponible\n\n");
                        DataOutputStream out_aux = new DataOutputStream(connection.getOutputStream());
                        out_aux.writeUTF("\n\nLa persona con la intenta comunicarse no se encuentra disponible en este momento, intente nuevamente mas tarde.\n\n");
                        connection.close();
                    }
                }
                
                if(Peer.conected==true){
                    connection = servidor.accept();
                    
                    //Peer.chat.append("\n\nLa persona con la intenta comunicarse no se encuentra disponible\n\n");
                    DataOutputStream out_aux = new DataOutputStream(connection.getOutputStream());
                    out_aux.writeUTF("\n\nLa persona con la intenta comunicarse no se encuentra disponible en este momento, intente nuevamente mas tarde.\n\n");
                    connection.close();
                }
  
            }
        }   catch (IOException ex) {
            Logger.getLogger(Peer.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
}

class Cliente{

    private final String ip;
    private final int puerto;
    private final Socket connection;
    
    Cliente(String ip, int puerto, Socket connection){
        this.ip = ip;
        this.puerto = puerto;
        this.connection = connection;
        
        try {
            
            //Creo el socket para conectarme con el servidor
            connection = new Socket(this.ip, this.puerto);
                        
            Peer.output =  new DataOutputStream(connection .getOutputStream());
            Peer.output.flush();
            Peer.input = new DataInputStream(connection.getInputStream());
             
            //Creo el hilo para chatear,una vez tengo establecida la coneccion
            Chatear chatting = new Chatear(Peer.input);
            chatting.start();
            
        } catch (IOException ex) {
            //Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            Peer.chat.append("-----------------------------------------------------------------------------------------");
            Peer.chat.append("\nLa persona con la intenta comunicarse no se encuentra disponible\n\n");
            Peer.chat.append("-----------------------------------------------------------------------------------------");
              
        } 
    }
    
}

class Chatear extends Thread{
    
    private final DataInputStream input;
    
   
    Chatear (DataInputStream input){
        this.input = input;
    }
    
    void cerrar() throws IOException{
        Peer.connection.close();
        Peer.output.close();
        Peer.input.close();
        Peer.conected = false;
        Peer.chat.append("-------------------------------------------------"
                        + "\n  Conexion finalizada.\n"
                        + "-------------------------------------------------\n");
    }
    
    @Override
    public void run(){
        Peer.mensaje.setEditable(true);
        while(true){
            try
            {
                String message = input.readUTF();
                
                if(message.contains("/quit")){
                    cerrar();
                    break;
                }else{
                Peer.chat.append(message);
                }
            
            } catch (IOException ex) {
                Logger.getLogger(Chatear.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}

class CanalNombres extends Thread{
    
    String group = "225.0.01";
    int portGroup = 5666;
    String usuario;
    int port_usuario;
    String ip_usuario;
    MulticastSocket ms;
    String asked = "";
    
    CanalNombres(String usuario, int port_server, String iplocal) {

        this.usuario = usuario;
        this.port_usuario = port_server;
        this.ip_usuario = iplocal;

        //Creo el socket multicast (me uno al grupo)
        try {
            ms = new MulticastSocket(portGroup);
            ms.joinGroup(InetAddress.getByName(group));
        } catch (UnknownHostException ex) {
            Logger.getLogger(CanalNombres.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CanalNombres.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public void Enviar_mensaje(String msj){
        try {
            byte buffer[] = msj.getBytes();
            DatagramPacket paqueteEnviar = new DatagramPacket(buffer, buffer.length,
                                                              InetAddress.getByName(group),
                                                              portGroup);
            ms.send(paqueteEnviar);
        } catch (UnknownHostException ex) {
            Logger.getLogger(CanalNombres.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CanalNombres.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    public String Recibir_mensaje(){
        
        String recibe = " ";
        
        try {
            
            DatagramPacket paqueteRecibir;
            byte buffer[] = new byte[1024];
            paqueteRecibir = new DatagramPacket(buffer, buffer.length);
            ms.receive(paqueteRecibir);
            recibe = new String(buffer);
            
            return recibe;
        } catch (IOException ex) {
            Logger.getLogger(CanalNombres.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return recibe;
    }
    
    public void CompartirContacto(String user_asking){
        String contacto = user_asking + ":" + usuario + ":" + port_usuario + ":" + ip_usuario;
        System.out.println(contacto);
        Enviar_mensaje(contacto);
    }
    
    public void RequestContacto(String nickname){
        String request = "REQUEST:"+ nickname + ":" + usuario;
        Enviar_mensaje(request);
        asked = nickname;
        System.out.println("Estoy preguntando por el usuario: " + asked);
    }
    
    public void run(){
        
        while(true){
            
            String recibido = Recibir_mensaje();
            
            String aux[] = recibido.split(":");
            
            if(aux[0].equals("REQUEST") && aux[1].equals(usuario)){
                System.out.println("El usuario " + aux[2] + " me pregunto mi informacion de contacto:");
                CompartirContacto(aux[2]);
            }
            if(aux[0].contains(usuario) && aux[1].contains(asked)){
                                
                Peer.port_llamar = Integer.parseInt(aux[2]);
                Peer.ip_llamar = "127.0.0.1";
                System.out.println("Se establecio conexi√≥n con: "+ Peer.ip_llamar +":"+aux[2]);
                Cliente cliente = new Cliente("127.0.0.1", Peer.port_llamar, Peer.connection);
                
                Peer.ipAsked.setText("Ip Adress: " + Peer.ip_llamar);
                Peer.portAsked.setText("Puerto: " + Peer.port_llamar);
            }
        }
    }
}
